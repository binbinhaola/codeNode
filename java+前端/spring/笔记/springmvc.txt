DOC:17.Web MVC framework

一、
1、导包：除了5个基本jar外加入
spring-web-*.jar
spring-webmvc-*.jar

2、Springmvc核心组件:http://127.0.0.1:8080/a/test
核心控制器：DispatcherServlet
控制器：    Controller(UrlFilenameViewController | SimpleFormController | ...)
处理映射器：HandlerMapping
视图解析器：ViewResolver & View
拦截器：    Interceptors

1.客户端将请求发送给后台（一般都是通过浏览器进行发送的），请求到了后台都是交给DispatcherServlet处理，
	所有相当于是直接发送给了DispatcherServlet。

2.DispatcherServlet根据请求的信息（URL、Http方法、请求报文头、请求参数Cookie等）
	调用HandlerMapping解析器解析该请求对应的handler。

3.解析到对应的handler后，DispatcherServlet将控制权移交给HandlerAdapter来处理请求，
	HandlerAdapter将处理器包装为适配器，从而支持多种类型的处理器。
	HandlerAdapter会根据实际需要的Handler调用真正的处理器来处理请求，
	处理器根据要求处理业务逻辑。

4.处理器处理完业务逻辑之后会返回一个ModelAndView对象，
	这里的Model是处理器处理完成之后的数据，View是一个逻辑上的View。

5.ViewResolver会根据逻辑View查找实际对应的是那个View。

6.DispatcherServlet最后将5中返回的Model放入到6中解析的正真的View中生成结果，并返回给请求者。

DispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，负责职责的分派，且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处。

DispatcherServlet主要用作职责调度，主要职责如下：
1、文件上传解析，如果请求类型是multipart将通过MultipartResolver进行文件上传解析；
2、通过HandlerMapping，将请求映射到处理器（返回一个HandlerExecutionChain，它包括一个处理器、多个HandlerInterceptor拦截器）；
3、通过HandlerAdapter支持多种类型的处理器(HandlerExecutionChain中的处理器)；
4、通过ViewResolver解析逻辑视图名到具体视图实现；
5、本地化解析； 
6、如果执行过程中遇到异常将交给HandlerExceptionResolver来解析。


3、web.xml配置(alt+/可以直接选择)
<servlet-name>hello</servlet-name>
<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

默认：
servletName-servlet.xml:即hello-servlet.xml，修改方式：
<init-param>
	<param-name>contextConfigLocation</param-name>
	<!-- 多个文件使用通配符： *-servlet.xml -->
	<param-value>/WEB-INF/hello-servlet.xml(classpath:xxx.xml)</param-value>
</init-param>
<servlet-mapping>
        <servlet-name>example</servlet-name>
        <!-- 直接使用/(不必/*，这样会拦截*.jsp请求) -->
        <url-pattern>/</url-pattern>
</servlet-mapping>



4、MVC配置文件：
schema:17.15.1 Enabling the MVC Java Config or the MVC XML Namespace

<!-- Handler Mapping -->
<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>

<!-- Controller(通过beanName完成url映射，必须加'/') -->
<bean name="/start" class="com.cssl.mvc.StartController"></bean>

视图解析器ViewResolver：
<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	<property name="prefix" value="/WEB-INF/jsp/"></property>
	<property name="suffix" value=".jsp"></property>
	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
</bean>
<!-- 相对UrlBasedViewResolver对jsp和jstl提供了更好的支持，不需要配置viewClass -->
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="prefix" value="/WEB-INF/jsp/"></property>
	<property name="suffix" value=".jsp"></property>
</bean>

Spring2.5之前，我们都是通过实现Controller接口或其实现类来定义我们的控制器类。


5、使用注解：配置少 低侵入(无需配置HandlerMapping、ViewResolver)
<context:component-scan base-package="com.cssl"/>
<mvc:annotation-driven/>:
自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter两个bean，是springMVC为Controller分发请求的Bean
视图解析：mav.setViewName("forward:success.jsp");


常用注解：
类上：@Controller | @RestController
      //将所有属性为UsersVo类型和键名是usersVoList的集合存入request的同时存入session作用域，另外注意集合方式必须返回ModelAndView(集合也可以使用ArrayList.class)
      @SessionAttributes(types=UsersVo.class,value={"usersVoList"})两者是and关系，需要同时满足。
      //写在类上相当于namespace 
      @RequestMapping("/parent")
      //或者结合方法上注解@RequestMapping(params="method=方法名")绑定该类下某个方法来执行
      @RequestMapping("/user.do") 表单提交action=user.do?method=reg
      如：@RequestMapping(params="method=reg")public String reg(String uname){ ... }

方法：@RequestMapping(value={"/a","/hello"},method=RequestMethod.GET,params="...")
      对于相同value的@RequestMapping可以通过method或params区别调用不同方法
      对于无返回值或返回Model的方法默认视图就是这里的value,如@RequestMapping("/hello")就是hello.jsp
      @GetMapping("/...")|@PostMapping("/...")
      不要只写@RequestMapping,将拦截所有请求

      Spring 3.X系列增加了新注解@ResponseBody，@RequestBody      
      @ResponseBody将内容或对象作为HTTP响应正文返回，并调用适合HttpMessageConverter转换对象，写入输出流
      @ResponseBody注解，表示该方法将会跳过视图处理部分将返回结果直接写入HTTP response body中。
      @ResponseBody绑定返回对象或集合，帮你将其转为Json(相当于struts的json插件功能)字符串（默认jackson的2个包struts2中找1.9x，Spring4.0以上版本需要Jackson新版本2.x以上的3个包）
      @ModelAttribute
      @ExceptionHandler

参数：@RequestParam(name|value="sid",required=false) int id     
      @RequestBody将HTTP请求正文转换为Json对象。request header Content-Type格式必须application/json或application/xml
      @PathVariable 用于restful风格
      @CookieValue(name|value="id",required=false) 取cookie值 @CookieValue(name="JSESSIONID")
      @RequestHeader(name|value="id",required=false) 取请求头信息
      @ModelAttribute("user")通常和@SessionAttributes("user")一起使用直接注给方法形参，也可以给模型添加属性(model.addAttribute(user))[两个注解要在同一个类中]
      如：
      在Controller上指定了@SessionAttributes，所以在@ModelAttribute("xxx")注解的参数会直接在@SessionAttributes中查找名为"xxx"的对象，如果没有找到则调用@ModelAttribute("xxx")注解的方法返回对象并存入@SessionAttributes


方法返回值：String(视图名),Model,ModelMap,ModelAndView,Set,List,Object,Map...
除了返回String和ModelAndView，逻辑视图名都会和请求URL绑定
ModelAndView: addObject("uu",user)
	      addObject(new User())==addObject("user",new User()) 使用类名首字母小写作为键
	      addObject(new ArrayList<User>)==add
Object("userList",new ArrayList<User>)
	      addObject("username")==addObject("string","username") 类型名首字母小写作为键
如果返回Map、Model、ModelMap到前台，页面直接取键名
如果将对象或集合当作方法返回值前台页面取值规则也同上！



访问到静态的文件：(如jpg,js,css)
如果DispatcherServlet拦截 *.action这样的URL，就不存在访问不到静态资源的问题。
如果拦截“/”，那么就拦截了所有的请求，即*.js,*.jpg,*.css的访问也就被拦截了

解决方法引入资源：
a、<mvc:resources location="/static/" mapping="/static/**"/> (注意'/')
  （静态资源直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.x.xsd）
b、<mvc:default-servlet-handler/> (兼容不同容器默认servlet处理资源)
c、原理同上，使用容器默认servlet处理资源，下面是tomcat配置
<servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.css</url-pattern>
</servlet-mapping>

解决中文乱码过滤器：
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>utf-8</param-value>
	</init-param>
</filter>	
<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>


*****************************************************************************************

二、vo注入、@ResponseBody|@RequestBody|@RestController|SSM整合

1、实体类注入：可以注入多个实体类，需要避免实体类同名属性(同名属性默认当数组处理)
String name,int age   UservO
2、SpringMvc可以直接接收数组、List、Set或Map作为参数，
但集合和Map必须在参数前面加@RequestParam:[@RequestParam Map<String, Object> param]，
而且不能加下标[index]，List的泛型类型必须是基本数据类型或String，不能使用自定义类，如：List<Users>

3、SpringMvc也可以把数组、List、Set或Map作为一个对象的属性接收:
注意：
如果泛型集合类型是自定义类型只能采用这种方式:List<Users>，前台必须带[index]
（不能加@RequestParam）
如果泛型集合类型是基本类型或String前台加不加[index]都可以

数组作为实体类属性时前台加不加[index]也都可以

4、重定向：return "redirect:...";  转发："forward:ff.action";
只要加了redirect:或forward:则后面都变成url不再是逻辑视图名！

5、AJAX请求@ResponseBody|@RequestBody(Jackson)
时间转换的处理:
a、通过后台的get方法中使用SimpleDateFormat解决
b、@JsonFormat(pattern="yyyy-MM-dd")
   @JSONField(format="yyyy-MM-dd")[fastJSON,删除Jackson包]
c、@JsonIgnore(true)不序列化该属性

json转换也可以由Jackson修改为fastjson处理：(前端要设置返回类型为json)
<mvc:annotation-driven>
   <mvc:message-converters register-defaults="true">
	<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
	    <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>	
	</bean>
   </mvc:message-converters>
</mvc:annotation-driven>

6、基本整合SSM
a、导入之前整合的Spring+MyBatis
b、配置监听器启动Spring的IoC容器
<listener>
        <listener-class>
		org.springframework.web.context.ContextLoaderListener
	</listener-class>
</listener>

<context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:beans.xml</param-value>
</context-param>


*****************************************************************************************

三、文件上传下载|@PathVariable|异常处理@ExceptionHandler

1、文件上传：enctype="multipart/form-data" method="post"
依赖commons-fileupload-x.jar、commons-io-x.jar包
@RequestMapping(value="/upload2") 
public String upload(
		MultipartFile file, 
		MultipartHttpServletRequest request
	) throws IOException {
	
	//保证用户没上传不报该错：exists but is a directory
	if(!file.isEmpty()){	
		System.out.println(file.getContentType()+":"+file.getName());
		//真实文件名
		System.out.println(file.getOriginalFilename());
		//获得真实路径 (也可采用接口ServletContextAware注入)
		String path = application.getRealPath("/upload")+File.separator;
		String name = path + file.getOriginalFilename();
		FileUtils.copyInputStreamToFile(file.getInputStream(), new File(name));
		//或者使用		
            	//file.transferTo(new File(path, name));         		

	}		
	return "redirect:hello";
}

上传必须配置如下解析器，否则MultipartFile为空：
<!-- 上传解析，如最大上传值及最小上传值，必须配置multipartResolver,名字也不能改 --> 
<bean id="multipartResolver"  
      class="org.springframework.web.multipart.commons.CommonsMultipartResolver">        
      <property name="maxUploadSize" value="10000000" /> <!-- 10M --> 
      <property name="maxInMemorySize" value="10240"/>   <!-- 最大临时内存大小 -->
      <property name="defaultEncoding" value="UTF-8"/>     
</bean> 

多文件上传：
a、使用MultipartFile[]，参数名和前台file的name相同
b、参数前加@RequestParam在新版本中可以省略(教材上版本低，所以要求必须加)

下载：
response.setContentType("application/x-msdownload;charset=UTF-8");		
response.setHeader("Content-disposition", "attachment;filename="+fileName);
OutputStream os = response.getOutputStream(); 使用该流向客户端输出！

http://127.0.0.1:8080/aa/showAll?id=10&name=100
2、@RequestMapping不但支持标准的URL，还支持Ant、restful风格。以下URL都是合法的：(Spring 3.0新增功能)
Ant风格：
?: 匹配一个字符
*: 匹配任意字符
**:匹配多层路径 /abc/cnc/dd
a./user/*/createUser
   匹配/user/aaa/createUser、/user/bbb/createUser等URL。
b./user/**/createUser
   匹配/user/createUser、/user/aaa/bbb/createUser等URL。
c./user/createUser??
   匹配/user/createUseraa、/user/createUserbb等URL。

Restful风格：Get post put delete
rest:Representational State Transfer(以资源为导向)
a./user/{userId}
   匹配user/123、user/abc等URL。
b./user/**/{userId}
   匹配user/aaa/bbb/123、user/aaa/456等URL。
c.company/{companyId}/??/{userId}/detail
   匹配company/123/us/456/detail等的URL
d.错误格式
  /user/**/{userId}/**/{username}
//post get
 

优点：因为隐藏了参数与路径的关系，可--
//springmvc/path/zhangsan/33
@RequestMapping(value="/path/{name}/{age}")
public String path(@PathVariable("name") String name,@PathVariable("age")...) {
	System.out.println(name);
	return "hello";
}
@PathVariable：映射URL中的占位符到目标方法的参数中


3、SpringMVC提供的异常处理主要有
a.实现HandlerExceptionResolver接口，扩展自定义异常处理
SpringMVC本身已经对其有了一个自身的实现――DefaultExceptionResolver,该解析器只是对其中的一些比较典型的异常进行了拦截处理。
<bean id="exceptionResolver" class="com.cssl.handler.ExceptionHandler"/>

b.使用@ExceptionHandler进行处理(局部异常)
使用@ExceptionHandler进行异常处理的方法必须与出错的方法在同一个Controller里面
一定要注明处理哪种异常类型
@ExceptionHandler(Exception.class)
public String error(Exception e){}

c.针对所有Controller异常处理(全局异常但不包括类型转换异常)
springmvc.xml配置
<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
   <property name="exceptionMappings">
	<props>
	    <prop key="java.lang.Exception">error</prop>
	</props>
   </property>
</bean>

如果把@ModelAttribute放在方法的注解上时，
代表的是：该Controller的所有方法在调用前，先执行此@ModelAttribute方法。
可以把这个@ModelAttribute特性，应用在BaseController当中，
所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。


*****************************************************************************************

四、拦截器(责任链模式)、类型转换、国际化、验证

1、拦截器：实现HandlerInterceptor接口或继承HandlerInterceptorAdapter
<!-- intercepter -->
<mvc:interceptors>
   <!-- 配置多个形成拦截器链 -->
   <mvc:interceptor>
	<!-- /**将拦截所有包括静态资源但不包括jsp,如果jsp包含静态js也会经过拦截器，但不会阻止js的下载 -->
	<!-- /*只拦截一级目录下所有Controller,如:/he.action,但不拦截二级目录及静态资源 -->	
	<mvc:mapping path="/**"/>|<mvc:mapping path="/*"/>
	<!-- 如果拦截了所有，必须设置放过静态资源 -->
	<mvc:exclude-mapping path="/resource/**"/>
	<bean class="com.cssl.interceptor.MyInterceptor"/>]
   </mvc:interceptor>
</mvc:interceptors>

拦截器参数handler中包含请求类及方法，可以精确控制调用方法权限
handler.toString().indexOf("方法名")!=-1


2、类型转换：
a、基本类型的数据类型转换自动完成
日期类型转换(springmvc只提供yyyy/MM/dd这样的格式转换)

b、@InitBinder //注解方式方法名可以任意命名，只能转换一种格式
public void initBind(DataBinder binder){
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	//true表示该日期字段可以为空
	binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf,false));	
}

c、直接在vo的属性上(get|set也可以)注解@DateTimeFormat(pattern="yyyy-MM-dd")

BindingResult:该类封装转换失败的信息，必须紧跟在command类型参数后面，日期必须是command属性
result.hasErrors()判断是否转换出错


3、自定义类型转换：
Spring3引入了一个Converter接口，它支持从一个Object转为另一个Object。除了Converter接口之外，实现 ConverterFactory接口和GenericConverter接口也可以实现我们自己的类型转换逻辑。 
A、定义转换类实现Converter<S,T>接口重写convert实现类型转换功能
B、添加注解@Component注册到bean到Spring容器
C、配置
<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	<property name="converters">
		<set>
			<ref bean="xxxConverter"/>
		</set>
	</property>
</bean>
或者手动注入日期格式类型：
<set>
   <bean class="com.cssl.converter.DateConverter">
	<constructor-arg type="java.lang.String" value="yyyy-MM-dd"/>
   </bean>
</set>
D、修改<mvc:annotation-driven conversion-service="conversionService"/> 

坐标：(x,y)->Point{int x; int y;}


4、国际化：IE11设置语言问题，不显示中文可以先删除英文语言选项
<!-- 资源文件绑定器(使用Spring标签配置) -->
<bean id="messageSource"             class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="message"/>
		<property name="useCodeAsDefaultMessage" value="true"/>
</bean>
在JSP文件中使用fmt标记就可以实现客户浏览器语言国际化
　　如:
    <fmt:setBundle basename="message"/>
　　<fmt:message key="info.login.title" />
　　其中的info.login.title和你的资源文件对应.

官方给出另外一种方式是使用spring自带的标签显示国际化信息,
如:<spring:message code="main.title" />
注意：使用springmvc标签必须配置监听器，是通过控制器访问页面
<listener>
   <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>	
</listener>


5、Spring3开始支持JSR-303验证框架：
验证使用的包hibernate-validator-5.0.1.Final-dist
最少需要4个jar:
hibernate-validator-5.0.1.Final.jar
required:classmate-0.8.0.jar、jboss-logging-3.1.1.GA.jar、validation-api-1.1.0.Final.jar
注解：
1、在vo参数前添加@Validated，后面紧跟BindingResult参数不能间隔其他参数
2、在实体类要验证的属性getXxx上添加各种验证注解
@NotNull(数字)、 @NotEmpty(字符串)、 @Size(min=4,max=6)、@Email
3、使用<sf:errors path="vo.fieldName"/>显示错误(vo对应实体类首字母小写UsersVo-usersVo)
4、国际化显示可以不写message,有默认出错信息提示，如果想自定义则修改键名(key)为:
Size.usersVo.name ，其含义为(Size代表@Size,usersVo代表vo,name代表fileName)
	

*****************************************************************************************

五、整合事务问题/在过滤器中获取springIOC容器中对象/自定义视图

MyBatis没有Spring事务管理的问题：
第一种情况：
注解方式：
SpringMVC和Spring整合的时候，SpringMVC的springmvc.xml文件中配置扫描包，只包含controller的注解，Spring的applicationContext.xml文件中配置扫描包时，不要包含controller的注解，如下所示：
SpringMVC的xml配置： 
<context:component-scan base-package="com.cssl.controller"/> 

因为springmvc.xml与applicationContext.xml都会加载，springmvc会将所有带@Service注解的类扫描并注入到Controller，加载applicationContext.xml的时候，spring同样会再产生service层和控制层对象，使得cglib将不对Service进行代理，直接导致的结果就是在applicationContext中的事务配置不起作用，发生异常时，无法对数据进行回滚。（Hibernate直接异常，找不到事务！）
在Spring的xml配置如下：(如果不设置过滤，还会产生一个Controller，只不过不会被springmvc调用)
<context:component-scan base-package="com.cssl">           
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
扫描包路径，不扫描带有@Controller注解的类。因为这些类在springmvc.xml中将被扫描。

根本原因：两个容器产生两套控制器和业务类，请求调用的是springmvc容器的而事务是控制在spring容器上(先初始化的是spring容器：监听器先于servlet执行)


只用一个配置文件：
合成一个配置文件也存在被加载两次生成两套类的问题，只能设置读取springmvc配置文件，不配监听
因为springmvc的核心servlet必须要能扫描到controller，否则无法访问控制器


比如：拦截器不能拦截页面，需要使用过滤器，并且在过滤器中获取业务逻辑层对象，执行部分业务代码

Web获取当前的SpringIoC容器  
方法一：（通过ServletContext加载spring容器）
ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(application);


方法二：（获取当前的spring容器，任何java类中适用）
WebApplicationContext act=ContextLoader.getCurrentWebApplicationContext();


public void init(FilterConfig fConfig) throws ServletException {
		
		ServletContext application = fConfig.getServletContext();
		ApplicationContext act=WebApplicationContextUtils.getWebApplicationContext(application);
		
		//tomcat启动时，从spring中获取容器，从容器中取出我们要的bean
		//WebApplicationContext act=ContextLoader.getCurrentWebApplicationContext();
		 this.studentService = act.getBean(StudentService.class);
		System.out.println("过滤器中的init---studentService:"+studentService);
		
}
-----------------------------------------------------------------------------------------------

<!-- 防止Spring内存溢出监听器 -->
<listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
</listener>


扩展知识点:
一、lombok
1、安装（可以直接安装或手动配置）
  a、拷贝lombok.jar到eclipse安装目录
  b、在eclipse.ini最后添加：
	-javaagent:lombok.jar

	
2、导包
   项目导包就可用


二、自定义视图： jsp html 下载 上传 定义成视图
A、写一个类实现View接口,实现其两方法
public String getContentType() {		
	return "text/html;charset=utf-8";
}
//渲染视图，输出到客户端
public void render(Map<String, ?> model, HttpServletRequest request,
		HttpServletResponse response) throws Exception {
	System.out.println("render:"+model.get("usersVo"));
	response.getWriter().print("<h1>MyView:"+new Date()+"</h1>");
}
B、使用@Component将该类注册到spring ioc容器
C、配置ViewResolver(根据id查找对应的视图解析类)
<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<!-- 数字越小代表优先级越高 -->
	<property name="order" value="100"/>	
</bean>
如：@Component("myView")类映射方法不能通过超链接的方式直接访问

@RequestMapping("/myview")
public String myview(){
	return "myView";
}
//这里的myview映射前台链接，return的"myView"对应@Component("myView")


-------------下载excle表格
// 文件名
String fileName = "student.xlsx";
// 设置下载头
response.setContentType("application/ms-excel;charset=UTF-8");
response.setHeader("Content-Disposition", "inline; filename=" + fileName);
// 根据工作簿创建Excel表
Sheet sheet = workbook.createSheet("sheet1");
// 设置表头内容
Row row = sheet.createRow(0);
row.createCell(0).setCellValue("序号");
row.createCell(1).setCellValue("姓名");
row.createCell(2).setCellValue("生日");
if (model == null) {
	return;
} else {
	List<Student> list = (List<Student>) model.get("list");
			for (int i = 0; i < list.size(); i++) {
				Student student = list.get(i);
				Row tempRow = sheet.createRow(i + 1);
				tempRow.createCell(0).setCellValue(student.getSid());
				tempRow.createCell(1).setCellValue(student.getSname());
				tempRow.createCell(2).setCellValue(student.getBornDate());
			}		
			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.flush();
			outputStream.close();
		}
